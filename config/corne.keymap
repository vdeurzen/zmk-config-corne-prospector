/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <24 35>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <27 26>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <28 27>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
        };

        num1 {
            bindings = <&kp N1>;
            key-positions = <1 13>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        num2 {
            bindings = <&kp N2>;
            key-positions = <2 14>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        num3 {
            bindings = <&kp N3>;
            key-positions = <3 15>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        num4 {
            bindings = <&kp N4>;
            key-positions = <4 16>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        num5 {
            bindings = <&kp N5>;
            key-positions = <5 17>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        num6 {
            bindings = <&kp N6>;
            key-positions = <6 18>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        num7 {
            bindings = <&kp N7>;
            key-positions = <7 19>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        num8 {
            bindings = <&kp N8>;
            key-positions = <8 20>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        num9 {
            bindings = <&kp N9>;
            key-positions = <9 21>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        num0 {
            bindings = <&kp N0>;
            key-positions = <10 22>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        arw_left {
            bindings = <&kp LEFT>;
            key-positions = <30 31>;
        };

        arw_dwn {
            bindings = <&kp DOWN>;
            key-positions = <31 32>;
        };

        arw_up {
            bindings = <&kp UP>;
            key-positions = <32 33>;
        };

        arw_rght {
            bindings = <&kp RIGHT>;
            key-positions = <33 34>;
        };
    };

    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        ntild: ntild {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&ntil>, <&ntild_cap>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        ntil: uc_ntil {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(GRAVE)>, <&macro_tap>, <&kp N>;

            wait-ms = <0>;
        };

        ntild_cap: uc_ntild_cap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LS(GRAVE)>,
                <&macro_tap>,
                <&kp N>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;
        };

        dir_dquot: dir_dquot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp SPACE>;
        };

        dir_squot: dir_squot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SPACE>;
        };

        dir_btck: dir_btck {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
        };

        dongle_boot: dongle_boot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
        };

        dir_tilde: dir_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp F  &kp P         &kp G    &kp J      &kp L      &kp U                         &kp Y    &kp SEMICOLON  &kp BACKSPACE
&kp TAB     &kp A  &kp R  &kp S  &kp T         &kp D    &kp H      &kp N      &kp E                         &kp I    &kp O          &kp SQT
&kp LSHFT   &kp Z  &kp X  &kp C  &kp V         &kp B    &kp K      &kp M      &kp COMMA                     &kp DOT  &kp FSLH       &kp RIGHT_SHIFT
                          &sl 1  &kp LEFT_ALT  &mo 1    &kp ENTER  &kp SPACE  &mt LS(LA(LC(LEFT_GUI))) DEL
            >;
        };

        number-and-bt {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans        &trans    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_0  &trans  &trans
&trans      &trans        &trans        &trans  &trans        &trans    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans           &trans  &trans
&trans      &trans        &trans        &trans  &trans        &trans    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans           &trans  &trans
                                        &trans  &kp LEFT_ALT  &trans    &trans           &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        SYS {
            if-layers = <1 1>;
            then-layer = <1>;
        };

        SYS_REV {
            if-layers = <1 1>;
            then-layer = <1>;
        };
    };
};
